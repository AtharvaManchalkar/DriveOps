name: Deploy to Render

on:
  push:
    branches: [ main ]
  workflow_dispatch: # Allow manual triggering

jobs:
  deploy-backend:
    name: Deploy Backend to Render
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: 'Car-Management-main/backend/api/package-lock.json'
          
      - name: Verify Backend Structure
        run: |
          echo "Checking backend structure..."
          ls -la Car-Management-main/backend/api/
          cat Car-Management-main/backend/api/package.json | grep -E '"name"|"main"|"scripts"' -A 2
          
      - name: Deploy Backend to Render
        uses: johnbeynon/render-deploy-action@v0.0.8
        with:
          service-id: ${{ secrets.RENDER_BACKEND_SERVICE_ID }}
          api-key: ${{ secrets.RENDER_API_KEY }}
        timeout-minutes: 10

  deploy-frontend:
    name: Deploy Frontend to Render
    runs-on: ubuntu-latest
    needs: deploy-backend
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: 'Car-Management-main/frontend/package-lock.json'
          
      - name: Clean and Install Frontend Dependencies
        run: |
          cd Car-Management-main/frontend
          echo "Cleaning previous builds..."
          rm -rf node_modules package-lock.json build
          echo "Installing dependencies..."
          npm install
          
      - name: Generate Tailwind CSS
        run: |
          cd Car-Management-main/frontend
          echo "Generating Tailwind CSS..."
          npx tailwindcss -i ./src/input.css -o ./src/output.css --minify
          
      - name: Build Frontend
        run: |
          cd Car-Management-main/frontend
          echo "Building frontend with production API URL..."
          REACT_APP_API_URL=${{ secrets.RENDER_BACKEND_URL }} npm run build
          echo "Build completed successfully!"
          ls -la build/
          
      - name: Deploy Frontend to Render
        uses: johnbeynon/render-deploy-action@v0.0.8
        with:
          service-id: ${{ secrets.RENDER_FRONTEND_SERVICE_ID }}
          api-key: ${{ secrets.RENDER_API_KEY }}
        timeout-minutes: 10

  build-docker:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    needs: [deploy-backend, deploy-frontend]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
          
      - name: Create Backend Uploads Directory
        run: |
          mkdir -p Car-Management-main/backend/api/uploads
          touch Car-Management-main/backend/api/uploads/.gitkeep
          
      - name: Build and Push Backend Image
        uses: docker/build-push-action@v5
        with:
          context: ./Car-Management-main/backend/api
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/driveops-backend:latest
            ${{ secrets.DOCKERHUB_USERNAME }}/driveops-backend:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          
      - name: Setup Frontend Build Context
        run: |
          cd Car-Management-main/frontend
          echo "Setting up frontend build context..."
          
          # Install dependencies and build
          npm install
          npx tailwindcss -i ./src/input.css -o ./src/output.css --minify
          REACT_APP_API_URL=${{ secrets.RENDER_BACKEND_URL }} npm run build
          
          # Create Docker context with build files
          mkdir -p docker-build-context
          cp -r build/* docker-build-context/
          
          # Create optimized nginx config
          cat > docker-build-context/nginx.conf << 'EOF'
          server {
              listen 80;
              server_name _;
              root /usr/share/nginx/html;
              index index.html;
              
              # Enable gzip compression
              gzip on;
              gzip_vary on;
              gzip_min_length 1024;
              gzip_types text/plain text/css text/xml text/javascript application/javascript application/xml+rss application/json;
              
              # Security headers
              add_header X-Frame-Options "SAMEORIGIN" always;
              add_header X-XSS-Protection "1; mode=block" always;
              add_header X-Content-Type-Options "nosniff" always;
              add_header Referrer-Policy "no-referrer-when-downgrade" always;
              add_header Content-Security-Policy "default-src 'self' http: https: data: blob: 'unsafe-inline'" always;
              
              # Handle client-side routing
              location / {
                  try_files $uri $uri/ /index.html;
              }
              
              # API proxy (if needed)
              location /api/ {
                  proxy_pass ${{ secrets.RENDER_BACKEND_URL }}/;
                  proxy_set_header Host $host;
                  proxy_set_header X-Real-IP $remote_addr;
                  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                  proxy_set_header X-Forwarded-Proto $scheme;
              }
              
              # Cache static assets
              location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg)$ {
                  expires 1y;
                  add_header Cache-Control "public, immutable";
              }
          }
          EOF
          
          # Create optimized Dockerfile for production
          cat > docker-build-context/Dockerfile << 'EOF'
          FROM nginx:alpine
          
          # Remove default nginx config
          RUN rm /etc/nginx/conf.d/default.conf
          
          # Copy our nginx config
          COPY nginx.conf /etc/nginx/conf.d/default.conf
          
          # Copy built app
          COPY . /usr/share/nginx/html
          
          # Remove nginx.conf from html directory
          RUN rm -f /usr/share/nginx/html/nginx.conf
          RUN rm -f /usr/share/nginx/html/Dockerfile
          
          # Create nginx user and set permissions
          RUN chown -R nginx:nginx /usr/share/nginx/html
          RUN chmod -R 755 /usr/share/nginx/html
          
          EXPOSE 80
          
          CMD ["nginx", "-g", "daemon off;"]
          EOF
          
      - name: Build and Push Frontend Image
        uses: docker/build-push-action@v5
        with:
          context: ./Car-Management-main/frontend/docker-build-context
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/driveops-frontend:latest
            ${{ secrets.DOCKERHUB_USERNAME }}/driveops-frontend:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  notify-success:
    name: Deployment Success Notification
    runs-on: ubuntu-latest
    needs: [deploy-backend, deploy-frontend, build-docker]
    if: success()
    steps:
      - name: Success Notification
        run: |
          echo "🚀 DriveOps Deployment Successful!"
          echo "Backend: ${{ secrets.RENDER_BACKEND_URL }}"
          echo "Frontend: ${{ secrets.RENDER_FRONTEND_URL }}"
          echo "Docker Images:"
          echo "  - ${{ secrets.DOCKERHUB_USERNAME }}/driveops-backend:latest"
          echo "  - ${{ secrets.DOCKERHUB_USERNAME }}/driveops-frontend:latest"
          
  notify-failure:
    name: Deployment Failure Notification
    runs-on: ubuntu-latest
    needs: [deploy-backend, deploy-frontend, build-docker]
    if: failure()
    steps:
      - name: Failure Notification
        run: |
          echo "❌ DriveOps Deployment Failed!"
          echo "Please check the workflow logs for details."
          exit 1